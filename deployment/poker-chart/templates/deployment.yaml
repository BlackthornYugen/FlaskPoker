apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}
  name: {{ .Release.Name }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
      - image: ghcr.io/blackthornyugen/flaskpoker:main
        imagePullPolicy: Always
        name: {{ .Release.Name }}
        env:
        - name: FLASK_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              key: secretkey
              name: cookie-secret
              optional: true
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: {{ .Release.Name }}-db
        - name: SQLALCHEMY_DATABASE_URI
          value: "postgresql://postgres:$(PGPASSWORD)@{{ .Release.Name }}-db.{{ .Release.Namespace }}.svc.cluster.local/postgres"
      imagePullSecrets:
      - name: ghrcred
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
# Google helm create secret if not exists
# found https://stackoverflow.com/a/61715870/2535649
# links to https://github.com/sankalp-r/helm-charts-examples/blob/main/sample_chart/templates/_helpers.tpl
kind: Secret
apiVersion: v1
metadata:
  name: cookie-secret
data:
  {{- $secret := lookup "v1" "Secret" .Release.Namespace "cookie-secret" -}}
  {{- if $secret -}} {{/*                        Reusing existing password if secret was found... */}}
  secretkey: {{ $secret.data.secretkey }}
  {{- else -}} {{/*                               ... otherwise, generate a random password.      */}}
  secretkey: {{ randAlphaNum 32 | b64enc }}
  {{- end -}}